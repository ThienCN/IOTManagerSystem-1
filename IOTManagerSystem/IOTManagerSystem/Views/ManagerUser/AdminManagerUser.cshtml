
@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    ViewBag.Title = "Quản lý người dùng";

    var user = new IOTManagerSystem.Model.USER.USERModel();
}

<style>
    .label-input {
        border-radius: 10px;
        background-color: #0b3147;
    }
    .img-avartar {
        border-radius: 50%;
        width: 100px;
        height: 100px;
        background-position: center center;
        background-repeat: no-repeat;
    }

    .k-dropdown {
        width: 100% !important;
    }

    .btn-success {
        color: #fff;
        background-color: #5cb85c;
        border-color: #4cae4c;
    }

    .btn-danger {
        color: #fff;
        background-color: #d9534f;
        border-color: #d43f3a;
    }

    .form-group {
        margin-bottom: 5px;
    }

    @@media (min-width: 768px) {
        #editAdd .modal-dialog {
            width: 60%;
        }
    }
</style>

<div class="row-fluid">
    <div class="form-group row">
        <div class="col-xs-4">
            <input type="password" class="form-control" placeholder="Nhập mã,tên,địa chỉ,email,số điện thoại,số CMND">
        </div>
        <div class="col-xs-3">
            <div class="form-group">
                <button type="button" class="btn btn-small btn-primary" onclick="filter()">Lọc</button>
                <button type="button" id="btnSearch" class="btn btn-grey btn-small" onclick="cancelFilter()">Hủy lọc</button>
            </div>
        </div>
    </div>
</div>

<div class="row-fluid">
    @(Html.Kendo().Grid<IOTManagerSystem.Model.USER.USERModel>()
                                                .Name("grid")
                                                .Columns(columns =>
                                                {
                                                    columns.Bound(p => p.id)
                                                          .HeaderTemplate("<input type='checkbox' id= 'checkboxcheckAll'  onClick='checkAllDetail(this)' />")
                                                          .ClientTemplate("<input class='checkrowid' type='checkbox' id='#=id#'/> ")
                                                          .Width(25).Filterable(false).Sortable(false).HtmlAttributes(new { style = "text-align:center" });
                                                    columns.Template(@<text></text>).HtmlAttributes(new { style = "text-align: center;" })
                                                                                    .ClientTemplate("<span ><a class='btn btn-mini btn-warning' style ='width:15px' onclick='editUser(this)'><i class='fa fa-edit'></i></a></span>").Width(60);
                                                    columns.Bound(p => p.avartar).Title("Avartar").Width(150).Hidden();
                                                    columns.Bound(p => p.ma_nguoi_dung).Title("Mã người dùng").Width(150);
                                                    columns.Bound(p => p.avartar)
                                                            .ClientTemplate(@"<img src='#=avartar ? avartar : '/Picture/doremon.png'#' style='width:50px;height: 50px;border-radius:50%;text-align:center;'>")
                                                            .Width(100).Title("Hình ảnh").HtmlAttributes(new { style = "text-align:center" });
                                                    columns.Bound(p => p.ho_ten_nguoi_dung).Title("Họ tên").Width(200);
                                                    columns.Bound(p => p.gioi_tinh).Title("Giới tính").Width(80);
                                                    columns.Bound(p => p.sdt).Title("SDT").Width(120);
                                                    columns.Bound(p => p.cmnd).Title("CMND").Width(120);
                                                    columns.Bound(p => p.email).Title("Email").Width(250);
                                                    columns.Bound(p => p.dia_chi).Title("Địa chỉ").Width(250);
                                                    columns.Bound(p => p.ngay_sinh).Title("Ngày sinh").Width(100).Format("{0:dd/MM/yyyy}");
                                                    columns.Bound(p => p.noi_sinh).Title("Nơi sinh").Width(100);
                                                    columns.Bound(p => p.ten_tham_so).Hidden();
                                                })
                                                .ToolBar(s =>
                                                {
                                                    s.Custom().Text("Thêm")
                                                        .HtmlAttributes(new { @class = "btn btn-success btn-small", @Href = "javascript:void(0)", @onclick = "addUser(this)" });

                                                    s.Custom().Text("Xóa")
                                                        .HtmlAttributes(new { @class = "btn btn-danger btn-small", @Href = "javascript:void(0)", @onclick = "showConfirmPopup()" });
                                                })
                                                //.Pageable()
                                                .Sortable()
                                                .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                                                .Pageable(p => p
                                                    .Messages(m => m
                                                            .Display("{0}-{1} của {2} dòng")
                                                            .Empty("Không có dòng nào")
                                                            .ItemsPerPage("")
                                                            .First("Trang kế")
                                                            .Last("Trang tiếp")
                                                            .Next("Đầu trang")
                                                            .Previous("Cuối trang")
                                                    ).PageSizes(new[] { 10, 20, 30, 40, 50 })
                                                )
                                                //.Editable(editable => editable.Mode(GridEditMode.InCell))
                                                .Scrollable()
                                                .Events(e => { e.DataBound("Databound"); })
                                                .Reorderable(r => r.Columns(true))
                                                .Resizable(r => r.Columns(true))
                                                .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Sort(s =>
                                                    {
                                                        s.Add("id");
                                                    })
                                                    .PageSize(10)
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.id);
                                                    })
                                                    .Read(read => read.Action("ReadUsers", "ManagerUser"))
                                                ))
</div>

<div class="modal" id="editAdd">
    <div class="modal-dialog">
        <!-- Modal content-->
        <form action=@Url.Action("CreateUpdateProfile", "ManagerUser") onsubmit="return ValidateUpdateProfile()" id="createUpdateProfileForm" method="post" enctype="multipart/form-data" style="margin:0px">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #0b3147; color: white;">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><label>Thêm người dùng</label></h4>
                </div>
                <div class="modal-body editAdd" style="padding-bottom:0px; padding-top:0px;">
                </div>
                <div class="modal-footer">
                    <button onclick="SaveProfile()" id="btnCreateUpdateProfile" type="button" class="btn btn-default" style="background-color: #0b3147; color: white">Cập nhật</button>
                    <button type="button" class="btn btn-default" style="background-color: #0b3147; color: white" data-dismiss="modal">Close</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script type="text/template" id="EditAddTemplate">
    <div class="w3-row" style="padding: 10px;">
        <input type="hidden" name="ma_nguoi_dung" value="#=ma_nguoi_dung!=null ? ma_nguoi_dung : '0' #" />
        <div class="w3-col w3-container s12 m7 l8">
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="control-label col-sm-4">Họ tên (*):</label>
                    <div class="col-sm-8">
                        <input type="text" name="ho_ten_nguoi_dung" class="form-control" value="#=ho_ten_nguoi_dung!=null ? ho_ten_nguoi_dung :''#">
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-4">Giới tính:</label>
                    <div class="col-sm-8">
                        <div class="controls col-sm-12" style="padding-left:0px; padding-right:0px;">
                            <select id="gioi_tinh" name="gioi_tinh" class='form-control'>
                                <option value="GIOITINH1">Nữ</option>
                                <option value="GIOITINH0">Nam</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-4">Ngày sinh:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control date-picker" name="ngay_sinh" value="#=kendo.toString(kendo.parseDate(ngay_sinh),'dd/MM/yyyy') !='01/01/0001' && kendo.toString(kendo.parseDate(ngay_sinh),'dd/MM/yyyy') !='01/01/1900'  ? kendo.toString(kendo.parseDate(ngay_sinh),'dd/MM/yyyy'): kendo.toString(kendo.parseDate(new Date()),'dd/MM/yyyy') #">
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-4">Nơi sinh:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" name="noi_sinh" value="#=noi_sinh!=null ? noi_sinh :''#">
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-4">Số điện thoại (*):</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" name="sdt" value="#=sdt!=null ? sdt :''#">
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-4">CMND (*):</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" name="cmnd" value="#=cmnd!=null ? cmnd :''#">
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-4">Email (*):</label>
                    <div class="col-sm-8">
                        <input type="email" class="form-control" name="email" value="#=email!=null ? email :''#">
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-4">Địa chỉ:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" name="dia_chi" value="#=dia_chi!=null ? dia_chi :''#">
                    </div>
                </div>
            </div>
        </div>
        <div class="w3-col w3-container s12 m5 l4" style="text-align:center;">
            <img class="img-avartar" src="#=avartar!=null ? avartar : '/UploadFile/AvatarUser/doremon.png'#" id="avartarUser">
            <div class="controls" style="margin-top:10px">
                <label class="label-input btn btn-white btn-info btn-sm"> 
                    Chọn ảnh
                    <input id="avartarFile" type="file" name="avartar" style="display:none;" class="form-control" accept="image/png, image/jpeg, image/jpg" />
                </label>
            </div>
        </div>
    </div>
</script>


<script>
    
    $(document).ready(function () {
        $("#quan-ly-nguoi-dung").addClass("active");
    });

    function addUser(e) {
        $("#editAdd").modal('show');
        $('.modal-title label').text('').append('Thêm người dùng');
        loadForm(JSON.parse('@Html.Raw(Json.Encode(user))'));
    }

    function editUser(e) {
        var data = $("#grid").data("kendoGrid").dataItem($(e).closest("tr"));
        $("#editAdd").modal('show');
        $('.modal-title label').text('').append('Chỉnh sửa người dùng');
        loadForm(data);
        $('#gioi_tinh').val(data.ten_tham_so);
    }

    function loadForm(data) {
        var EditAddTemplate = kendo.template($("#EditAddTemplate").html());
        $(".editAdd").html(EditAddTemplate(data));
        $('.date-picker').datepicker({ format: 'dd/mm/yyyy', autoclose: true, todayHighlight: true });
        $('#avartarFile').unbind().change(function () {
            readURL($(this));
        });
        ValidateUpdateProfile();
    }

    function SaveProfile() {
        $("#createUpdateProfileForm").submit();
    }

    function ValidateUpdateProfile() {
        $.validator.setDefaults({ ignore: ":hidden:not(select)" })
        $("#createUpdateProfileForm").validate({
            rules: {
                'ho_ten_nguoi_dung': { required: true },
                'sdt': { required: true },
                'cmnd': { required: true },
                'email': { required: true },
            },
            messages: {
                'ho_ten_nguoi_dung': { required: "Thông tin bắt buộc" },
                'sdt': { required: "Thông tin bắt buộc" },
                'cmnd': { required: "Thông tin bắt buộc" },
                'email': { required: "Thông tin bắt buộc" },
            },
            errorPlacement: function (error, element) {
            },
            submitHandler: function (form) {
                $(form).ajaxSubmit({
                    clearForm: false,
                    beforeSend: function () {
                        blockUI(true);
                    },
                    success: function (data) {
                        blockUI(false);
                        if (data.success) {
                            $("#editAdd").modal('hide');
                            $.gritter.add({
                                text: "Thành công",
                                class_name: 'gritter-success'
                            });
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                        else {
                            $.gritter.add({
                                text: "Lỗi: " + data.error,
                                class_name: 'gritter-error'
                            });
                        }
                    }
                });
                return false;
            }
        });
    }

    function readURL(input) {
        if (input[0].files && input[0].files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var data = reader.result;
                if (data.match(/^data:image\//)) {
                    $("#avartarUser").attr("src", e.target.result);
                } else {
                    $.gritter.add({
                        text: "Vui lòng chọn hình ảnh!",
                        class_name: 'gritter-error'
                    });
                }
            };
            reader.readAsDataURL(input[0].files[0]);
        }
    }

    //resize grid
    function Databound() {
        resizeGrid(225);
    }
    function resizeGrid(number) {
        var h_search = $("header").height();
        var h = parseInt($(window).height()) - h_search;
        var content = $("#grid").find(".k-grid-content");
        content.height(h - number);
        var contentlock = $("#grid").find(".k-grid-content-locked");
        contentlock.height(h - number - 17);
    }
    //
    function checkAllDetail(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    //
    function blockUI(isMark) {
        if (isMark) {
            $(document).ajaxStart($.blockUI({ message: '<i class="fa fa-spinner fa-3x fa-lg fa-spin txt-color-blueDark"></i>', theme: false })).ajaxStop($.unblockUI);
        }
        else {
            $(document).ajaxStart($.blockUI({ message: '<i class="fa fa-spinner fa-3x fa-lg fa-spin txt-color-blueDark"></i>', theme: false, overlayCSS: { backgroundColor: 'transparent' } })).ajaxStop($.unblockUI);
        }
    }
</script>

